In this project, we aim to establish communication between two raspberry pis, using the Mqtt protocol. 

1_The first task consists of publishing the sensors values of RP1(publisher), to RP2(subscriber) and display them on the
live dashboard of RP2. To start, on RP1, we create a python project and we call it ClientPublish(file uploaded on github)
and we execute it. Now we run node-red command on RP2 and use "mqtt in" modules. We should change each ones topic depending on the topic
that we subscribe to, for each sensor. If we want to make sure that everything is okay, on the RP2 node red window,
we should be able to see the same values when we connect to each mqtt module a msg.payload module in debug window.
Now we connect a gauge to each mqtt, and in the gauge settings we do small changes to be able to see the values correctly.
Nevertheless, we should choose in each MQtt module the localhost option, and the topic depending on the one that we published
to first, in the python file. The last thing to do is a small transformations to the values, in the python file. 


2_The second task is to publish a text message from RP2 to RP1(in this case RP1 is the subscriber) and to display it on 
its 8x8 led display.To do so, we start by connecting inject to mqtt out to be able to subscribe to the "textbox"topic, 
and msg.payload to be able to display the text saved in this module, on RP1 8x8 led display. Once we receive the message we'll be able to print it in the debug window on python(RP1)
and we can now use the sense.show_message to display it. In our case we put hello world in the inject module.


!!!Pour aller plus loin!!!
In this last part, we use the same concept as part 2, but this time we do some coding to make some transformations on msg.payload in order to display the image published from RP2 on the RP1 display.
Let's take the exemple of the question mark, defined as "image" in the clientsubscribe.py file. First we need to publish it so we paste the entire list with the commas, the spaces between characters and the brackets removed.
Now we use data.decode("utf-8")  to transform it to a string and finally we convert it to a list using the function Convert(). Now that we can use the function sense.set_pixels to display it. 



Sources:
Part 1 and 2: https://www.rs-online.com/designspark/plug-and-play-iot-with-the-pi-sense-hat
Part 3: https://pythonhosted.org/sense-hat/api/

Please note the string-list transformations, such as the convert function and the transformations done to the accelero values were done by me.